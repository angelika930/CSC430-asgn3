#lang typed/racket

(require typed/rackunit)

;--------------------------------------------------------------------------
(define-type ExprC (U Value LamC AppC IfC Symbol SeqC SetC))

(define-type Env (Listof Binding))
(define-type TEnv (Listof TBinding))
(define-type Value (U Real Boolean String CloV PrimV ArrayV NullV))
(define-type Ty (U NumT BoolT StrT NullT ArrayT FuncT))
(define-type Store (Listof Storage))
(struct V*S ([val : Value] [store : Store]) #:transparent)
(struct Env*Sto ([env : Env] [sto : Store]) #:transparent)
(struct List*Sto ([vals : (Listof Value)] [sto : Store]) #:transparent)

(struct Storage ([location : Real] [val : Value]) #:transparent)
(struct Binding ([name : Symbol] [location : Real]) #:transparent)
(struct TBinding ([name : Symbol] [type : Ty]) #:transparent)
(struct Index ([index : Real] [val : Value]) #:transparent)

(struct AppC ([id : ExprC] [args : (Listof ExprC)]) #:transparent)
(struct IfC ([if : ExprC] [then : ExprC] [else : ExprC]) #:transparent)
(struct LamC ([arg : (Listof Symbol)] [body : ExprC] [argT : (Listof Ty)]) #:transparent)
(struct SeqC ([expr : (Listof ExprC)]) #:transparent)
(struct SetC ([name : Symbol] [val : ExprC]) #:transparent)

(struct CloV ([params : (Listof Symbol)] [body : ExprC] [env : Env]) #:transparent)
(struct PrimV ([func : ((Listof Value) Store -> V*S)]) #:transparent)
(struct ArrayV ([location : Real] [length : Real]) #:transparent)
(struct NullV () #:transparent)

(struct NumT () #:transparent)
(struct BoolT () #:transparent)
(struct StrT () #:transparent)
(struct ArrayT () #:transparent)
(struct NullT () #:transparent)
(struct FuncT ([paramT : (Listof Ty)] [return : Ty]) #:transparent)


;---------------------------------------------------------------------------

;Checks if a given argument is a keyword
(: not-keyword? (Any -> Boolean : #:+ Symbol))
(define (not-keyword? sym)
  (and (symbol? sym) (not (or (equal? 'if sym) (equal? 'then sym) (equal? 'else sym) (equal? 'let sym)
                              (equal? 'anon sym) (equal? ': sym) (equal? '<- sym) (equal? 'seq sym) (equal? ':= sym)))))

;---------------------------------------------------------------------------

;Adds two reals
(define (add [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? op1) (? real? op2)) (V*S (+ op1 op2) sto)]
    [other (error 'add "OAZO Input invalid")]))

;Subtract two reals
(define (sub [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? op1) (? real? op2)) (V*S (- op1 op2) sto)]
    [other (error 'sub "OAZO Input invalid")]))

;Multiply two reals
(define (mult [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? op1) (? real? op2)) (V*S (* op1 op2) sto)]
    [other (error 'mult "OAZO Input invalid")]))

;Divide two reals
(define (div [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? op1) 0) (error "OAZO Divisor cannot be 0")]
    [(list (? real? op1) (? real? op2)) (V*S (/ op1 op2) sto)]
    [other (error 'div "OAZO Input invalid")]))

;Compares two reals
(define (less-than [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? op1) (? real? op2)) (V*S (<= op1 op2) sto)]
    [other (error 'less-than "OAZO Input invalid")]))


;Sees if two nums are equal
(define (num-eq? [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? real? arg1) (? real? arg2)) (V*S (equal? arg1 arg2) sto)]
    [other (error "OAZO wrong # args")]))
(check-equal? (num-eq? (list 1 1) (list (Storage 0 0))) (V*S #t (list (Storage 0 0))))
(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (num-eq? (list 1 2 3) (list (Storage 0 0)))))


;Sees if two strings are equal
(define (str-eq? [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? string? arg1) (? string? arg2)) (V*S (equal? arg1 arg2) sto)]
    [other (error "OAZO wrong # args")]))
(check-equal? (str-eq? (list "hello" "hello") (list (Storage 0 0))) (V*S #t (list (Storage 0 0))))
(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (str-eq? (list "hello" "A" " b") (list (Storage 0 0)))))



;Sees if two arrays are equal
(define (arr-eq? [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (ArrayV loc1 len1) (ArrayV loc2 len2)) (V*S (equal? loc1 loc2) sto)]
    [other (error "OAZO wrong # args")]))

(check-equal? (arr-eq? (list (ArrayV 12 5)  (ArrayV 12 5)) '()) (V*S #t '()))
(check-equal? (arr-eq? (list (ArrayV 7 5)  (ArrayV 12 5)) '()) (V*S #f '()))
(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (arr-eq? '() '())))

(define (substr [args : (Listof Value)] [sto : Store]) : V*S
  (match args
    [(list (? string? str) (? natural? b) (? natural? e)) (V*S (substring str b e) sto)]
    [other (error "OAZO wrong # args")]))

(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (substr '() '())))

;Serialized a value
(define (serialize  [args : (Listof Value)]) : String
  (match args
    [(list (? string? s)) (~v s)] 
    [(list (? real? r)) (~v r)]
    [(list #t) "true"]
    [(list #f) "false"]
    [(list (? CloV? v)) "#<procedure>"]
    [(list (? PrimV? v)) "#<primop>"]
    [(list (? NullV? v)) "Null"]
    [(list (? ArrayV? v)) "#<array>"]
    [other (error 'serialize "OAZO wrong # args")]))

(check-equal? (serialize (list "hello")) "\"hello\"")
(check-equal? (serialize (list (ArrayV 2 2))) "#<array>")
(check-equal? (serialize (list (NullV))) "Null")


(define baseEnv (list
                 (Binding '+ 0)
                 (Binding '- 1)
                 (Binding '* 2)
                 (Binding '/ 3)
                 (Binding '<= 4)
                 (Binding 'num-eq? 5)
                 (Binding 'str-eq? 6)
                 (Binding 'arr-eq? 7)
                 (Binding 'arr 8)
                 (Binding 'aref 9)
                 (Binding 'aset 10)
                 (Binding 'alen 11)
                 (Binding 'true 12)
                 (Binding 'false 13)
                 (Binding 'substring 14)))

(define base-tenv (list
                 (TBinding '+ (FuncT (list (NumT) (NumT)) (NumT)))
                 (TBinding '- (FuncT (list (NumT) (NumT)) (NumT)))
                 (TBinding '* (FuncT (list (NumT) (NumT)) (NumT)))
                 (TBinding '/ (FuncT (list (NumT) (NumT)) (NumT)))
                 (TBinding '<= (FuncT (list (NumT) (NumT)) (BoolT)))
                 (TBinding 'num-eq? (FuncT (list (NumT) (NumT)) (BoolT)))
                 (TBinding 'str-eq? (FuncT (list (StrT) (StrT)) (BoolT)))
                 (TBinding 'arr-eq? (FuncT (list (ArrayT) (ArrayT)) (BoolT)))
                 (TBinding 'arr (FuncT (list (NumT) (NumT)) (ArrayT)))
                 (TBinding 'aref (FuncT (list (ArrayT) (NumT)) (NumT)))
                 (TBinding 'aset (FuncT (list (ArrayT) (NumT) (NumT)) (NullT)))
                 (TBinding 'alen (FuncT (list (ArrayT)) (NumT)))
                 (TBinding 'true (BoolT))
                 (TBinding 'false (BoolT))
                 (TBinding 'substring (FuncT (list (StrT) (NumT) (NumT)) (StrT)))))



;---------------------------------------------------------------------------

;Checks a list to see if it contains duplicates
(define (check-dups [l : (Listof Symbol)]) : Boolean
  (match l
    ['() #f]
    [(cons f r) (or (check-rest r f) (check-dups r))]))

;Checks a list to see if it contains a symbol
(define (check-rest [l : (Listof Symbol)] [s : Symbol]) : Boolean
  (match l
    ['() #f]
    [(cons f r) (or (equal? f s) (check-rest r s))]))

;Parses an Sexpression into an ExprC
(define (parse [s : Sexp]) : ExprC
  (match s
    [(? real? r) r]
    [(? string? s) s]
    [(list (? symbol? id) ':= val) (SetC id (parse val))]
    [(list 'seq exps ...) (SeqC (map parse exps))]
    [(list 'let (list (list (? not-keyword? keys) ':  ty ) '<- args) ... expr)
     (cond
       [(check-dups (cast keys (Listof Symbol))) (error "OAZO duplicate args")]
       [else  (AppC (LamC (cast keys (Listof Symbol)) (parse expr) (map parseType (cast ty (Listof Sexp))))
                    (map parse (cast args (Listof Sexp))))])]
    [(list 'anon (list (list ty (? not-keyword? ids) )...) ': expr)
     (cond
       [(check-dups (cast ids (Listof Symbol))) (error "OAZO duplicate args")]
       [else  (LamC (cast ids (Listof Symbol)) (parse expr) (map parseType (cast ty (Listof Sexp))))])]
    [(list 'if ifExpr 'then thenExpr 'else elseExpr) (IfC (parse ifExpr) (parse thenExpr) (parse elseExpr))]
    [(list expr exps ...) (AppC (parse expr) (map parse exps))]
    [(? not-keyword? s) s]
    [other (error "OAZO Malformed ExprC:" s)]))



(define (parseType [s : Sexp]) : Ty
  (match s
    ['num (NumT)]
    ['bool (BoolT)]
    ['str (StrT)]
    ['void (NullT)]
    ['numarray (ArrayT)]
    [(list args ... '-> ret) (FuncT (map parseType (cast args (Listof Sexp))) (parseType ret))]
    [other (error "OAZO Not a Type ~e" s)]))

(check-equal? (parse '{anon {[num x] [(num bool str numarray void -> num) y]} : {1}})
              (LamC '(x y) (AppC 1 '()) (list (NumT) (FuncT (list (NumT) (BoolT)
                                                                  (StrT) (ArrayT) (NullT)) (NumT)))))
(check-exn (regexp (regexp-quote "OAZO Not a Type"))
           (lambda () (parseType '7)))

;Extends the given store
(define (extend-types [env : TEnv] [values : (Listof Ty)] [names : (Listof Symbol)]) : TEnv
  (match values
    ['() env]
    [(cons f r) (cons (TBinding (first names) f) (extend-types env r (rest names)))]))

(define (tenv-lookup [for : Symbol] [env : TEnv]) : Ty
  (match env
    ['() (error 'lookup "OAZO name not found: ~e" for)]
    [(cons (TBinding name loc) r) (cond
                                   [(symbol=? for name) loc]
                                   [else (tenv-lookup for r)])]))

(define (type-check [e : ExprC] [env : TEnv]) : Ty
  (match e
    [(? real? r) (NumT)]
    [(SeqC e) (last (map (lambda ([ex : ExprC]) (type-check ex env)) e))]
    [(LamC params body ty) (FuncT ty (type-check body (extend-types env ty params)))]
    [(SetC id val) (cond
                     [(equal? (tenv-lookup id env) (type-check val env)) (NullT)]
                     [(error "OAZO invalid set")])]
    [(AppC id Listexp)
          (define result (type-check id env))
          (match result
          [(FuncT args ret) (cond
               [(equal? args (map (lambda ([ex : ExprC]) (type-check ex env)) Listexp)) ret]
               [else (error "OAZO types don't match" args Listexp)])]
           [other (error "OAZO not a function" id result)])]
    [(IfC ifExpr thenExpr elseExpr) (cond
                                      [(and (equal? (type-check ifExpr env) (BoolT))
                                            (equal? (type-check thenExpr env) (type-check elseExpr env)))
                                       (type-check thenExpr env)]
                                      [else (error "OAZO wrong types" ifExpr thenExpr elseExpr)])]
    [(? symbol? s) (tenv-lookup s env)]
    [(? string? str) (StrT)]))

(check-equal? (type-check (parse '(if true then 4 else 12)) base-tenv) (NumT))

(check-exn (regexp (regexp-quote "OAZO invalid set"))
           (lambda () (type-check (parse '(anon ((num x)) : (x := "str"))) base-tenv)))

(check-exn (regexp (regexp-quote "OAZO wrong types"))
           (lambda () (type-check (parse '(if true then 4 else "12")) base-tenv)))

(check-exn (regexp (regexp-quote "OAZO name not found"))
           (lambda () (type-check (parse '(anon ((num x)) : (y := 1234))) base-tenv)))

(check-exn (regexp (regexp-quote "OAZO types don't match"))
           (lambda () (type-check (parse '(+ 4 "abc")) base-tenv)))

(check-exn (regexp (regexp-quote "OAZO name not found"))
           (lambda () (type-check (parse '(^ 4 "abc")) base-tenv)))


(check-exn (regexp (regexp-quote "OAZO not a function"))
           (lambda () (type-check (parse '(4 4)) base-tenv)))

(check-equal? (type-check (parse '{seq "hello" 8 "hello"}) '()) (StrT))
(check-equal? (type-check (parse '(anon ((num x)) : (x := 1234))) base-tenv) (FuncT (list (NumT)) (NullT)))
(check-equal? (type-check (parse '{anon {[num x] [str y]} : y}) '()) (FuncT (list (NumT) (StrT)) (StrT)))
(check-equal? (type-check (parse '{{anon {[num x] [str y]} : y} 1 "hi"}) '()) (StrT))

(check-equal? (type-check 1 '()) (NumT))

(check-equal? (check-rest '(a b c d) 'd) #t)

(check-equal? (parse (list 'x ':= 3)) (SetC 'x 3))
;(check-equal? (parse (list 'if 3 'then 4 'else 5)) (IfC 3 4 5))

(check-equal? (parse '{let {[z : num] <- 1}{+ z 4}}) (AppC (LamC '(z) (AppC '+ '(z 4)) (list (NumT))) '(1)))
(check-exn (regexp (regexp-quote "OAZO duplicate args"))
           (lambda () (parse '{let [[x : num] <- {1}] [[x : num] <- {2}] {1}})))

;---------------------------------------------------------------------------

;Looks up a value in an environment
(define (lookup [for : Symbol] [env : Env] [sto : Store]) : Value
  (match env
    ['() (error 'lookup "OAZO name not found: ~e" for)]
    [(cons (Binding name loc) r) (cond
                                   [(symbol=? for name) (store-lookup loc sto)]
                                   [else (lookup for r sto)])]))

;Look up a location bound to a var
(define (env-lookup [for : Symbol] [env : Env]) : Real
  (match env
    ['() (error 'lookup "OAZO name not found: ~e" for)]
    [(cons (Binding name loc) r) (cond
                                   [(symbol=? for name) loc]
                                   [else (env-lookup for r)])]))

(check-exn (regexp (regexp-quote "OAZO name not found: 'x"))
           (lambda () (env-lookup 'x (list (Binding 'y 0) (Binding 'z 1)))))

;Looks up for a location in store
(define (store-lookup [for : Real] [sto : Store]) : Value
  (match sto
    ['() (error 'store-lookup "OAZO: location not found ~e" for)]
    [(cons (Storage location val) r) (cond
                                       [(eq? for location) val]
                                       [else (store-lookup for r)])]))

(check-exn (regexp (regexp-quote "OAZO: location not found 2"))
           (lambda () (store-lookup 2 (list (Storage 0 0) (Storage 1 1)))))

;-------------------------------------------------------------------------

;Extends the given environment
(define (extend [env : Env] [sto : Store] [value : Value] [name : Symbol]) : Env*Sto
  (define sto2 (extendStore sto value))
  (Env*Sto (cons (Binding name (find-location sto2)) env) sto2))

;Extend a list to the given enviroment
(define (extend-list [env : Env] [sto : Store] [values : (Listof Value)] [names : (Listof Symbol)]) : Env*Sto
  (match values
    ['() (Env*Sto env sto)]
    [(cons f r) (define result (extend env sto f (first names)))
                (extend-list (Env*Sto-env result) (Env*Sto-sto result) r (rest names))]))

;Extends the given store
(define (extendStore [sto : Store] [value : Value]) : Store
  (cons (Storage (+ (find-location sto) 1) value) sto))

(define (modifyStore [sto : Store] [location : Real] [value : Value]) : Store
  (cons (Storage location value) sto))

;find the highest memory location
(define (find-location [sto : Store]) : Real
  (match sto
    [(list (Storage l v)) l]
    [(cons f r) (max (Storage-location f) (find-location r))])) 

;Interprets a list of arguments
(define (interp-list [e : (Listof ExprC)] [env : Env] [sto : Store]) : List*Sto
  (match e
    ['() (List*Sto '() sto)]
    [(cons f r) (define val*sto (interp f env sto))
                (define result (interp-list r env (V*S-store val*sto)))
                (List*Sto (cons (V*S-val val*sto) (List*Sto-vals result)) (List*Sto-sto result))]))
 
;Interprets an AST (as an ExprC) into a real number
(define (interp [e : ExprC] [env : Env] [sto : Store]) : V*S
  (match e
    [(? real? r) (V*S r sto)]
    [(SeqC e) (define result (interp-list e env sto)) (V*S (last (List*Sto-vals result)) (List*Sto-sto result))]
    [(LamC params body ty) (V*S (CloV params body env) sto)]
    [(SetC id val) (define result (interp val env sto))
                   (V*S (NullV) (modifyStore (V*S-store result) (env-lookup id env) (V*S-val result)))]
    [(AppC id Listexp)
     (define newV*S (interp id env sto))
     (match (V*S-val newV*S)
       [(CloV params body CloEnv)
        (cond
          [(equal? (length params) (length Listexp))
           (define vals*store (interp-list Listexp env (V*S-store newV*S)))
           (define newEnv*Sto (extend-list CloEnv (List*Sto-sto vals*store) (List*Sto-vals vals*store) params))
           (interp body (Env*Sto-env newEnv*Sto) (Env*Sto-sto newEnv*Sto))]
          [else (error 'interp "OAZO not correct # arguments ~v ~v" Listexp params)])]
       [(PrimV func)
        (define vals*store (interp-list Listexp env sto))
        (func (List*Sto-vals vals*store) (List*Sto-sto vals*store))]
       [other (error 'interp "OAZO not a function")])] 
    [(? PrimV? v) (V*S v sto)] ;Pass up
    [(? CloV? v) (V*S v sto)] ;Pass up
    [(? symbol? s) (V*S (lookup s env sto) sto)]
    [(? string? str) (V*S str sto)] ;Pass up
    [(IfC ifExpr thenExpr elseExpr)
     (define newV*S (interp ifExpr env sto))
     (match (V*S-val newV*S)
         [#t (interp thenExpr env (V*S-store newV*S))]
         [#f (interp elseExpr env (V*S-store newV*S))]
         [other (error "OAZO Not a boolean")])]))

(check-equal? (parse '(seq 1 2)) (SeqC (list 1 2)))
(check-equal? (interp (SeqC (list 1 2)) '() '()) (V*S 2 '()))
(check-equal? (interp (SetC 'x 2) (list (Binding 'x 0)) (list (Storage 0 1)))
              (V*S (NullV) (list (Storage 0 2) (Storage 0 1))))
    

;Wrapper for our parser and interpretor 
(define (top-interp [s : Sexp]) : String
  (serialize (list ( V*S-val (interp (parse s) baseEnv baseStore))))) 


;Allocates memory from the store with defualt value
(define (allocate [sto : Store] [size : Real] [default : Value]) : V*S
  (cond
    [(> size 0) (define newStore (extendStore sto default))
                (define retLocation (find-location newStore))
                (V*S retLocation (V*S-store (allocate newStore (- size 1) default)))]
    [else (V*S (find-location sto) sto)]))

(define (arr [values : (Listof Value)] [sto : Store]) : V*S
  (match values
    [(list (? real? size) (? real? default)) (define result (allocate sto size default))
                                             (V*S (ArrayV (+ (find-location sto) 1) size) (V*S-store result))]
    [other (error "OAZO wrong # args")]))

(check-equal? (arr (list 2 3) (list (Storage 0 0))) (V*S (ArrayV 1 2)
                                                         (list (Storage 2 3) (Storage 1 3) (Storage 0 0) )))
(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (arr (list 1 2 3) (list (Storage 0 0)))))

;Return an element of an array
(define (aref [values : (Listof Value)] [sto : Store]) : V*S
  (match values
    [(list (ArrayV loc size) (? real? r)) (cond
                       [(>= r size) (error "OAZO: index out of bound")]
                       [else (V*S (store-lookup (+ loc r) sto) sto)])]
    ['() (error "OAZO: wrong # of args")]))

(check-equal? (aref (list (ArrayV 1 3) 1) (list (Storage 2 10))) (V*S 10 (list (Storage 2 10))))
(check-exn (regexp (regexp-quote "OAZO: wrong # of args"))
           (lambda () (aref '() '())))
(check-exn (regexp (regexp-quote "OAZO: index out of bound"))
           (lambda () (aref (list (ArrayV 1 3) 20) (list (Storage 2 10)))))


;(define lst '(1 2 3 4))
;(check-equal? (aref lst 3) 4)
;(check-exn (regexp (regexp-quote "OAZO: Index exceeds length of list")) 
 ;          (lambda () (aref lst 4)))

;Sets a value of an array
(define (aset [values : (Listof Value)] [sto : Store]) : V*S
  (match values
    [(list (ArrayV loc size) (? real? idx) (? real? val)) (cond
                                                            [(>= idx size) (error "OAZO: index out of bound")]
                                                            [else (V*S (NullV) (modifyStore sto (+ loc idx) val))])]
    ['() (error "OAZO: wrong # of args")]))

(check-equal? (aset (list (ArrayV 1 3) 1 2) (list (Storage 2 10))) (V*S (NullV) (list (Storage 2 2) (Storage 2 10))))
(check-exn (regexp (regexp-quote "OAZO: wrong # of args"))
           (lambda () (aset '() '())))
(check-exn (regexp (regexp-quote "OAZO: index out of bound"))
           (lambda () (aset (list (ArrayV 1 3) 20 1) (list (Storage 2 10)))))

;Gets the length of an array
(define (alen [values : (Listof Value)] [sto : Store]) : V*S
   (match values
    [(list (ArrayV loc size)) (V*S size sto)]
    ['() (error "OAZO: wrong # of args")]))

(check-equal? (alen (list (ArrayV 1 2)) (list (Storage 0 0))) (V*S  2 (list (Storage 0 0))))
(check-exn (regexp (regexp-quote "OAZO: wrong # of args")) 
           (lambda () (alen '() (list (Storage 0 0))))) 




(define baseStore (list
                 (Storage 0 (PrimV add))
                 (Storage 1 (PrimV sub))
                 (Storage 2 (PrimV mult))
                 (Storage 3 (PrimV div))
                 (Storage 4 (PrimV less-than))
                 (Storage 5 (PrimV num-eq?))
                 (Storage 6 (PrimV str-eq?))
                 (Storage 7 (PrimV arr-eq?))
                 (Storage 8 (PrimV arr))
                 (Storage 9 (PrimV aref))
                 (Storage 10 (PrimV aset))
                 (Storage 11 (PrimV alen))
                 (Storage 12 #t)
                 (Storage 13 #f)
                 (Storage 14 (PrimV substr))))

;-------------------------------------------------------------------------

(check-equal? (top-interp '{{{anon {[num y]} : {anon {[num x]} : {+ x y}}} 7} 3}) "10")
(check-equal? (top-interp '{substring "abcdef" 1 5}) "\"bcde\"") 
(check-equal? (interp-list (list {+ 1 {+ 1 1}} {+ 2 3}) baseEnv baseStore)
 (List*Sto
 '(3 5)
 baseStore))

(check-equal? (extend-list baseEnv baseStore '(1 2) '(x y))
              (Env*Sto
 (cons (Binding 'y 16) (cons (Binding 'x 15) baseEnv))
 (cons (Storage 16 2) (cons (Storage 15 1) baseStore))))


;not-keyword? 
;(check-equal? (not-keyword? ':) #f)
;(check-equal? (not-keyword? '<-) #f)
;(check-equal? (not-keyword? 'abc) #t)

;parse
;(check-equal? (parse '{if true then 1 else 2}) (IfC 'true 1 2))
;(check-equal? (parse '{let {z <- {+ 9 14}} {y <- 98} {+ z y}}) (parse '{{anon {z y} : {+ z y}} {+ 9 14} 98}))
;(check-equal? (parse "hello") "hello")
;(check-exn (regexp (regexp-quote "OAZO Malformed ExprC: 'if"))
;           (lambda () (parse '(if x then y))))
;(check-exn (regexp (regexp-quote "OAZO duplicate args"))
;           (lambda () (parse '(anon (x x) : 3))))
;(check-exn (regexp (regexp-quote "OAZO duplicate args"))
;           (lambda () (parse '(let (z <- 1) (z <- 2) (+ z z)))))

;lookup
;(check-equal? (lookup '+ baseEnv baseStore) (PrimV add))
;(check-exn (regexp (regexp-quote "lookup: OAZO name not found: 'x"))
;           (lambda () (lookup 'x '() baseStore)))

;interp
(check-equal? (interp (AppC (PrimV add) '(4 5)) '() '()) (V*S 9 '()))
(check-equal? (interp (AppC (CloV '(x y) 'x baseEnv) '(4 5)) baseEnv baseStore)
              (V*S 4 (cons (Storage 16 5) (cons (Storage 15 4) baseStore))))

(check-exn (regexp (regexp-quote "OAZO not a function"))
           (lambda () (interp (AppC 4 '(4)) '() '())))

(check-equal? (interp 'x (list (Binding 'y 2) (Binding 'x 1)) (list (Storage 2 3) (Storage 1 4)))
              (V*S 4 (list (Storage 2 3) (Storage 1 4)))) 
(check-equal? (interp 3 '() '()) (V*S 3 '()))
(check-equal? (interp "123" '() '()) (V*S "123" '()))

(check-exn (regexp (regexp-quote "lookup: OAZO name not found: 'x")) 
           (lambda () (interp 'x '() '())))

(check-exn (regexp (regexp-quote "OAZO not correct # arguments"))
           (lambda () (interp (AppC (LamC '() 9 '()) '(17)) baseEnv baseStore)))

(check-equal? (interp (IfC 'true 1 0) baseEnv baseStore) (V*S 1 baseStore))
(check-equal? (interp (IfC 'false 1 0) baseEnv baseStore) (V*S 0 baseStore))
(check-exn (regexp (regexp-quote "OAZO Not a boolean"))
           (lambda () (interp (IfC 7 1 0) baseEnv baseStore)))

;Prim Functions

(check-equal? (sub '(4 5) '()) (V*S -1 '()))
(check-equal? (mult '(4 5) '()) (V*S 20 '()))
(check-equal? (div '(5 5) '()) (V*S 1 '()))
(check-equal? (less-than '(3 4) '()) (V*S #t '()))

(check-equal? (serialize '(#t))"true")
(check-equal? (serialize '(#f))"false")
(check-equal? (serialize (list (CloV '() 1 '()))) "#<procedure>")
(check-equal? (serialize (list (PrimV add))) "#<primop>")

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (add (list "s" 5) '())))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (sub (list #f 5) '())))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (mult (list #t 5) '())))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (div (list "7" 5) '())))
(check-exn (regexp (regexp-quote "OAZO Divisor cannot be 0"))
           (lambda () (div (list 5 0) '())))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (less-than (list 3 4 5) '())))

(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (serialize (list "s" 5))))
;top-interp

;(define prog2 ' {
;                 {func {sqr x} : {* x x}}
;                 {func {main init} : {sqr 7}}
;                 })
 
(define prog3 '{
                {func {[num f] [num x] [num x]} : x}
                {func {[num main ]} : {f x}}
                })

(define prog4 '{{anon {[num five]} : 5} 3})


(check-exn (regexp (regexp-quote "OAZO Malformed ExprC"))
           (lambda () (top-interp prog3)))


;testing for multiple parameters
(check-exn (regexp (regexp-quote "OAZO Malformed ExprC"))
           (lambda () (top-interp prog3)))

(check-exn (regexp (regexp-quote "OAZO duplicate args"))
           (lambda () (top-interp '{{anon {[num x] [num x]} : {+ x x}} 2}))) 



;Testing for zero parameters
(check-equal? (top-interp prog4) "5")
