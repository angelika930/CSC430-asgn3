#lang typed/racket

(require typed/rackunit)

;--------------------------------------------------------------------------
(define-type ExprC (U Value LamC AppC IfC Symbol))

(define-type Env (Listof Binding))
(define-type Value (U Real Boolean String CloV PrimV LamC arrayV))
(struct arrayV ([location : Real] [length : Real]))
(define-type Store (Listof Storage))
(struct V*S ([val : Value] [store : Store]) #:transparent)
(struct Env*Sto ([env : Env] [sto : Store]) #:transparent)
(struct List*Sto ([vals : (Listof Value)] [sto : Store]) #:transparent)

(struct Storage ([location : Real] [val : Value]) #:transparent)
(struct Binding ([name : Symbol] [location : Real]) #:transparent)
(struct Index ([index : Real] [val : Value]) #:transparent)

(struct AppC ([id : ExprC] [args : (Listof ExprC)]) #:transparent)
(struct IfC ([if : ExprC] [then : ExprC] [else : ExprC]) #:transparent)
(struct CloV ([params : (Listof Symbol)] [body : ExprC] [env : Env]) #:transparent)
(struct PrimV ([func : ((Listof Value) -> Value)]) #:transparent)
(struct LamC ([arg : (Listof Symbol)] [body : ExprC]) #:transparent)


 
;---------------------------------------------------------------------------

;Checks if a given argument is a keyword
(: not-keyword? (Any -> Boolean : #:+ Symbol))
(define (not-keyword? sym)
  (and (symbol? sym) (not (or (eq? 'if sym) (eq? 'then sym) (eq? 'else sym) (eq? 'let sym)
                              (eq? 'anon sym) (eq? ': sym) (eq? '<- sym)))))

;---------------------------------------------------------------------------

;Adds two reals
(define (add [args : (Listof Value)]) : Real
  (match args
    [(list (? real? op1) (? real? op2)) (+ op1 op2)]
    [other (error 'add "OAZO Input invalid")]))

;Subtract two reals
(define (sub [args : (Listof Value)]) : Real
  (match args
    [(list (? real? op1) (? real? op2)) (- op1 op2)]
    [other (error 'sub "OAZO Input invalid")]))

;Multiply two reals
(define (mult [args : (Listof Value)]) : Real
  (match args
    [(list (? real? op1) (? real? op2)) (* op1 op2)]
    [other (error 'mult "OAZO Input invalid")]))

;Divide two reals
(define (div [args : (Listof Value)]) : Real
  (match args
    [(list (? real? op1) 0) (error "OAZO Divisor cannot be 0")]
    [(list (? real? op1) (? real? op2)) (/ op1 op2)]
    [other (error 'div "OAZO Input invalid")]))

;Compares two reals
(define (less-than [args : (Listof Value)]) : Boolean
  (match args
    [(list (? real? op1) (? real? op2)) (<= op1 op2)]
    [other (error 'less-than "OAZO Input invalid")]))

;Sees if two values are equal
(define (OAZOeq [args : (Listof Value)]) : Boolean
  (match args
    [(list arg1 arg2) (cond
                        [(or (CloV? arg1) (CloV? arg2) (PrimV? arg1) (PrimV? arg2)) #f]
                        [else (equal? arg1 arg2)])]
    [other (error "OAZO wrong # args")]))


;Serialized a value
(define (serialize  [args : (Listof Value)]) : String
  (match args
    [(list (? string? s)) (~v s)] 
    [(list (? real? r)) (~v r)]
    [(list #t) "true"]
    [(list #f) "false"]
    [(list (? CloV? v)) "#<procedure>"]
    [(list (? PrimV? v)) "#<primop>"]
    [other (error 'serialize "OAZO wrong # args")]))

;Signals an error
(define (err [args : (Listof Value)])
  (error 'user-error (serialize args)))

;Creates an array of a given size
(define (arr [size : Integer] [val : Real]) : (Listof Real) 
  (cond
    [(<= size 0) (error "OAZO: Cannot make an array of size less than or equal to 0")]
    [else
      ((inst build-list Real) size (lambda (x) val))]))

(check-equal? (arr 3 4) '(4 4 4))
(check-exn (regexp (regexp-quote "OAZO: Cannot make an array of size less than or equal to 0"))
           (lambda () (arr 0 3)))

;Return an element of an array
(define (aref [name : (Listof Real)] [index : Integer]) : Real
  (cond
    [(>= index (length name)) (error "OAZO: Index exceeds length of list")]
    [else (list-ref name index)]))

(define lst '(1 2 3 4))
(check-equal? (aref lst 3) 4)
(check-exn (regexp (regexp-quote "OAZO: Index exceeds length of list")) 
           (lambda () (aref lst 4)))



(define baseEnv (list
                 (Binding '+ 0)
                 (Binding '- 1)
                 (Binding '* 2)
                 (Binding '/ 3)
                 (Binding '<= 4)
                 (Binding 'error 5)
                 (Binding 'equal? 6)
                 (Binding 'true 7)
                 (Binding 'false 8)))

(define baseStore (list
                 (Storage 0 (PrimV add))
                 (Storage 1 (PrimV sub))
                 (Storage 2 (PrimV mult))
                 (Storage 3 (PrimV div))
                 (Storage 4 (PrimV less-than))
                 (Storage 5 (PrimV err))
                 (Storage 6 (PrimV OAZOeq))
                 (Storage 7 #t)
                 (Storage 8 #f)))

;---------------------------------------------------------------------------

;Parses an Sexpression into an ExprC
(define (parse [s : Sexp]) : ExprC
  (match s
    [(? real? r) r]
    [(? string? s) s]
    [(list 'let (list (? not-keyword? keys) '<- args) ... expr)
     (cond
       [(check-dups (cast keys (Listof Symbol))) (error "OAZO duplicate args")]
       [else  (AppC (LamC (cast keys (Listof Symbol)) (parse expr))
                    (map parse (cast args (Listof Sexp))))])]
    [(list 'anon (list (? not-keyword? ids) ...) ': expr)
     (cond
       [(check-dups (cast ids (Listof Symbol))) (error "OAZO duplicate args")]
       [else  (LamC (cast ids (Listof Symbol)) (parse expr))])]
    [(list 'if ifExpr 'then thenExpr 'else elseExpr) (IfC (parse ifExpr) (parse thenExpr) (parse elseExpr))]
    [(list expr exps ...) (AppC (parse expr) (map parse exps))]
    [(? not-keyword? s) s]
    [other (error "OAZO Malformed ExprC:" s)]))

;Checks a list to see if it contains duplicates
(define (check-dups [l : (Listof Symbol)]) : Boolean
  (match l
    ['() #f]
    [(cons f r) (or (check-rest r f) (check-dups r))]))

;Checks a list to see if it contains a symbol
(define (check-rest [l : (Listof Symbol)] [s : Symbol]) : Boolean
  (match l
    ['() #f]
    [(cons f r) (or (equal? f s) (check-rest r s))]))


;---------------------------------------------------------------------------

;Looksup a value in an environment
(define (lookup [for : Symbol] [env : Env] [sto : Store]) : Value
  (match env
    ['() (error 'lookup "OAZO name not found: ~e" for)]
    [(cons (Binding name loc) r) (cond
                                   [(symbol=? for name) (store-lookup loc sto)]
                                   [else (lookup for r sto)])]))

;Look ups for a location in store
(define (store-lookup [for : Real] [sto : Store]) : Value
  (match sto
    ['() (error 'store-lookup "OAZO: location not found: ~e" for)]
    [(cons (Storage location val) r) (cond
                                       [(eq? for location) val]
                                       [else (store-lookup for r)])]))

;-------------------------------------------------------------------------

;Extends the given environment
(define (extend [env : Env] [sto : Store] [value : Value] [name : Symbol]) : Env*Sto
  (define sto2 (extendStore sto value))
  (Env*Sto (cons (Binding name (find-location sto2)) env) sto2))

;Extend a list to the given enviroment
(define (extend-list [env : Env] [sto : Store] [values : (Listof Value)] [names : (Listof Symbol)]) : Env*Sto
  (match values
    ['() (Env*Sto env sto)]
    [(cons f r) (define result (extend env sto f (first names)))
                (extend-list (Env*Sto-env result) (Env*Sto-sto result) r (rest names))]))

;Extends the given store
(define (extendStore [sto : Store] [value : Value]) : Store
  (cons (Storage (+ (find-location sto) 1) value) sto))

;find the highest memory location
(define (find-location [sto : Store]) : Real
  (match sto
    [(list (Storage l v)) l]
    [(cons f r) (max (Storage-location f) (find-location r))])) 

;Interprets a list of arguments
(define (interp-list [e : (Listof ExprC)] [env : Env] [sto : Store]) : List*Sto
  (match e
    ['() (List*Sto '() sto)]
    [(cons f r) (define val*sto (interp f env sto))
                (define result (interp-list r env (V*S-store val*sto)))
                (List*Sto (cons (V*S-val val*sto) (List*Sto-vals result)) (List*Sto-sto result))]))
 
;Interprets an AST (as an ExprC) into a real number
(define (interp [e : ExprC] [env : Env] [sto : Store]) : V*S
  (match e
    [(? real? r) (V*S r sto)]
    [(LamC params body) (V*S (CloV params body env) sto)]
    [(AppC id Listexp)
     (define newV*S (interp id env sto))
     (match (V*S-val newV*S)
       [(CloV params body CloEnv)
        (cond
          [(equal? (length params) (length Listexp))
           (define vals*store (interp-list Listexp env (V*S-store newV*S)))
           (define newEnv*Sto (extend-list CloEnv (List*Sto-sto vals*store) (List*Sto-vals vals*store) params))
           (interp body (Env*Sto-env newEnv*Sto) (Env*Sto-sto newEnv*Sto))]
          [else (error 'interp "OAZO not correct # arguments")])]
       [(PrimV func)
        (define vals*store (interp-list Listexp env sto))
        (V*S (func (List*Sto-vals vals*store)) (List*Sto-sto vals*store))]
       [other (error 'interp "OAZO not a function")])] 
    [(? PrimV? v) (V*S v sto)] ;Pass up
    [(? CloV? v) (V*S v sto)] ;Pass up
    [(? symbol? s) (V*S (lookup s env sto) sto)]
    [(? string? str) (V*S str sto)] ;Pass up
    [(IfC ifExpr thenExpr elseExpr)
     (define newV*S (interp ifExpr env sto))
     (match (V*S-val newV*S)
         [#t (interp thenExpr env (V*S-store newV*S))]
         [#f (interp elseExpr env (V*S-store newV*S))]
         [other (error "OAZO Not a boolean")])]))

    
   
    

;Wrapper for our parser and interpretor 
(define (top-interp [s : Sexp]) : String
  (serialize (list ( V*S-val (interp (parse s) baseEnv baseStore)))))

;-------------------------------------------------------------------------

(check-equal? (top-interp '{{{anon {y} : {anon {x} : {+ x y}}} 7} 3}) "10") 
(check-equal? (interp-list (list {+ 1 {+ 1 1}} {+ 2 3}) baseEnv baseStore)
 (List*Sto
 '(3 5)
 (list
  (Storage 0 (PrimV add))
  (Storage 1 (PrimV sub))
  (Storage 2 (PrimV mult))
  (Storage 3 (PrimV div))
  (Storage 4 (PrimV less-than))
  (Storage 5 (PrimV err))
  (Storage 6 (PrimV OAZOeq))
  (Storage 7 #t)
  (Storage 8 #f))))

(check-equal? (extend-list baseEnv baseStore '(1 2) '(x y))
              (Env*Sto
 (list (Binding 'y 10)
       (Binding 'x 9)
       (Binding '+ 0)
       (Binding '- 1)
       (Binding '* 2)
       (Binding '/ 3)
       (Binding '<= 4)
       (Binding 'error 5)
       (Binding 'equal? 6)
       (Binding 'true 7)
       (Binding 'false 8))
 (list
  (Storage 10 2)
  (Storage 9 1)
  (Storage 0 (PrimV add))
  (Storage 1 (PrimV sub))
  (Storage 2 (PrimV mult))
  (Storage 3 (PrimV div))
  (Storage 4 (PrimV less-than))
  (Storage 5 (PrimV err))
  (Storage 6 (PrimV OAZOeq))
  (Storage 7 #t)
  (Storage 8 #f))))


;not-keyword? 
;(check-equal? (not-keyword? ':) #f)
;(check-equal? (not-keyword? '<-) #f)
;(check-equal? (not-keyword? 'abc) #t)

;parse
;(check-equal? (parse '{if true then 1 else 2}) (IfC 'true 1 2))
;(check-equal? (parse '{let {z <- {+ 9 14}} {y <- 98} {+ z y}}) (parse '{{anon {z y} : {+ z y}} {+ 9 14} 98}))
;(check-equal? (parse "hello") "hello")
;(check-exn (regexp (regexp-quote "OAZO Malformed ExprC: 'if"))
;           (lambda () (parse '(if x then y))))
;(check-exn (regexp (regexp-quote "OAZO duplicate args"))
;           (lambda () (parse '(anon (x x) : 3))))
;(check-exn (regexp (regexp-quote "OAZO duplicate args"))
;           (lambda () (parse '(let (z <- 1) (z <- 2) (+ z z)))))

;lookup
;(check-equal? (lookup '+ baseEnv baseStore) (PrimV add))
;(check-exn (regexp (regexp-quote "lookup: OAZO name not found: 'x"))
;           (lambda () (lookup 'x '() baseStore)))

;interp
(check-equal? (interp (AppC (PrimV add) '(4 5)) '() '()) (V*S 9 '()))
(check-equal? (interp (AppC (CloV '(x y) 'x baseEnv) '(4 5)) baseEnv baseStore) (V*S 4 (list
  (Storage 10 5)
  (Storage 9 4)
  (Storage 0 (PrimV add))
  (Storage 1 (PrimV sub))
  (Storage 2 (PrimV mult))
  (Storage 3 (PrimV div))
  (Storage 4 (PrimV less-than))
  (Storage 5 (PrimV err))
  (Storage 6 (PrimV OAZOeq))
  (Storage 7 #t)
  (Storage 8 #f))))

(check-exn (regexp (regexp-quote "OAZO not a function"))
           (lambda () (interp (AppC 4 '(4)) '() '())))

(check-equal? (interp 'x (list (Binding 'y 2) (Binding 'x 1)) (list (Storage 2 3) (Storage 1 4))) (V*S 4 (list (Storage 2 3) (Storage 1 4)))) 

(check-equal? (interp (add '(1 2)) '() '()) (V*S 3 '()))
(check-equal? (interp "123" '() '()) (V*S "123" '()))

(check-exn (regexp (regexp-quote "lookup: OAZO name not found: 'x")) 
           (lambda () (interp 'x '() '())))

(check-exn (regexp (regexp-quote "OAZO not correct # arguments"))
           (lambda () (interp (AppC (LamC '() 9) '(17)) baseEnv baseStore)))

(check-equal? (interp (IfC 'true 1 0) baseEnv baseStore) (V*S 1 baseStore))
(check-equal? (interp (IfC 'false 1 0) baseEnv baseStore) (V*S 0 baseStore))
(check-exn (regexp (regexp-quote "OAZO Not a boolean"))
           (lambda () (interp (IfC 7 1 0) baseEnv baseStore)))

;Prim Functions

(check-equal? (sub '(4 5)) -1)
(check-equal? (mult '(4 5)) 20)
(check-equal? (div '(5 5)) 1)
(check-equal? (less-than '(3 4)) #t)

(check-equal? (serialize '(#t))"true")
(check-equal? (serialize '(#f))"false")
(check-equal? (serialize (list (CloV '() 1 '()))) "#<procedure>")
(check-equal? (serialize (list (PrimV add))) "#<primop>")

(check-equal? (OAZOeq '(5 4)) #f)
(check-equal? (OAZOeq '(5 5)) #t)
(check-equal? (OAZOeq (list (PrimV add) (PrimV add))) #f)

(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (OAZOeq '(1 2 3))))

(check-exn (regexp (regexp-quote "user-error: 5"))
           (lambda () (err (list  5))))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (add (list "s" 5))))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (sub (list #f 5))))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (mult (list #t 5))))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (div (list "7" 5))))
(check-exn (regexp (regexp-quote "OAZO Divisor cannot be 0"))
           (lambda () (div (list 5 0))))

(check-exn (regexp (regexp-quote "OAZO Input invalid"))
           (lambda () (less-than (list 3 4 5))))

(check-exn (regexp (regexp-quote "OAZO wrong # args"))
           (lambda () (serialize (list "s" 5))))
;top-interp

;(define prog2 ' {
;                 {func {sqr x} : {* x x}}
;                 {func {main init} : {sqr 7}}
;                 })

(define prog3 '{
                {func {f x x} : x}
                {func {main} : {f x}}
                })

(define prog4 '{{anon {five} : 5} 3})


(check-exn (regexp (regexp-quote "OAZO Malformed ExprC"))
           (lambda () (top-interp prog3)))
(check-exn (regexp (regexp-quote "user-error: \"1234\""))
           (lambda () (top-interp '(+ 4 (error "1234")))))


;testing for multiple parameters
(check-exn (regexp (regexp-quote "OAZO Malformed ExprC"))
           (lambda () (top-interp prog3)))

(check-exn (regexp (regexp-quote "OAZO duplicate args"))
           (lambda () (top-interp '{{anon {x x} : {+ x x}} 2}))) 



;Testing for zero parameters
(check-equal? (top-interp prog4) "5")
